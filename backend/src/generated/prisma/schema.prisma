generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String          @id @default(uuid())
  name                    String?
  email                   String          @unique
  image                   String?
  role                    UserRole        @default(USER)
  password                String
  verificationToken       String?         @unique
  verificationTokenExpiry DateTime?
  isVerified              Boolean         @default(false)
  forgotPasswordToken     String?         @unique
  forgotPasswordExpiry    DateTime?
  refreshToken            String?         @unique
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  problems                Problem[]
  submission              Submission[]
  problemSolved           ProblemSolved[]
  playlists               Playlist[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAT     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String
  userId      String
  createdAT   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  problems    ProblemInPlaylist[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) //unique playlist names per user
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playListId String
  problemId  String

  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlist  Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}
